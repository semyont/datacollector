<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_a2s_4jw_1x">
 <title>Writing Whole Files</title>
 <conbody>
  <p><indexterm>file name expression<indexterm>writing whole
                files</indexterm></indexterm><indexterm>whole files<indexterm>file name
                    expression</indexterm></indexterm>When writing whole files, you configure a
                <uicontrol>File Name Expression</uicontrol> property in the destination. The
            expression defines the name for the output file. </p>
        <p>Each whole file origin includes file information in the fileInfo fields. So you can
            easily base the output file names on the original file names from the source system. </p>
        <p>The following table lists the field names that hold the input file name for each origin,
            and a basic expression that names the output file based on the input file name:</p>
        <p>
            <table frame="all" rowsep="1" colsep="1" id="table_qp4_lk5_bz">
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" colwidth="1.0*"/>
                    <colspec colname="c2" colnum="2" colwidth="1.0*"/>
                    <colspec colname="c3" colnum="3" colwidth="1.0*"/>
                    <thead>
                        <row>
                            <entry>Origin</entry>
                            <entry>File Name Field Path</entry>
                            <entry>Base Expression</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Directory</entry>
                            <entry>/fileInfo/filename</entry>
                            <entry>${record:value('/fileInfo/filename')}</entry>
                        </row>
                        <row>
                            <entry>SFTP/FTP</entry>
                            <entry>/fileInfo/filename</entry>
                            <entry>${record:value('/fileInfo/filename')}</entry>
                        </row>
                        <row>
                            <entry>Amazon S3</entry>
                            <entry>/fileInfo/objectKey</entry>
                            <entry>${record:value('/fileInfo/objectKey')}* </entry>
                        </row>
                        <row>
                            <entry namest="c1" nameend="c3">* Note that the objectKey field can
                                include a field path as well as a file name. Use this expression
                                when the objectKey is just a file name.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </p>
        <section>
            <title>Example</title>
            <p>You want a pipeline to pass whole files from a local directory to Amazon S3. For the
                output file name, you want to append the .json file extension to the original file
                name. </p>
            <p>The Directory origin stores the original file name in the /fileInfo/filename field,
                so you can use the following expression for the Amazon S3 <uicontrol>File Name
                    Expression</uicontrol> property:
                <codeblock>${str:concat(record:value('/fileInfo/filename'), ".json")}</codeblock></p>
            <p>Or, more
                simply...<codeblock>${record:value('/fileInfo/filenameâ€™)}.json</codeblock></p>
        </section>
 </conbody>
</concept>
