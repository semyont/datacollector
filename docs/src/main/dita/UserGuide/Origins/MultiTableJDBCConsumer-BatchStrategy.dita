<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_n5t_zgx_4y">
 <title>Batch Strategy</title>
 <conbody>
        <p><indexterm>JDBC Multitable Consumer origin<indexterm>batch
                strategy</indexterm></indexterm><indexterm>batch strategy<indexterm>JDBC Multitable
                    Consumer origin</indexterm></indexterm>The origin creates each batch of data
            from a single table. You can define one of the following strategies that the origin uses
            to create each batch:</p>
        <p>
            <dl>
                <dlentry>
                    <dt>Switch Tables</dt>
                    <dd>The origin creates a batch of data from one table, and then switches to the
                        next table to create the next batch. </dd>
                    <dd>For example, let's say that the batch size for the origin is set to 100. The
                        origin is configured to read from two tables, each of which contains 1,000
                        rows. The origin creates the first batch when it reads 100 rows from table1.
                        Then, the origin switches to table2 and creates the second batch when it
                        reads 100 rows from table2.</dd>
                    <dd>When the origin runs an SQL query on a table, the database executes the
                        query and caches the result set in the database. When the origin creates
                        another batch from the same table, it retrieves the rows from the result set
                        cache in the database rather than running another SQL query.</dd>
                    <dd>For example, let's again assume that the batch size is 100 and the origin
                        reads from two tables, each of which contains 1,000 rows. The origin runs an
                        SQL query on table1, which returns all 1,000 rows. The origin creates a
                        batch when it reads the first 100 rows. The next 900 rows are cached as a
                        result set in the database. Then the origin runs an SQL query on table2,
                        repeating the process. After the origin sends the batch from table2, the
                        origin creates the next batch from table1 using the result set cache from
                        table1.</dd>
                    <dd>By default, the origin instructs the database to cache an unlimited number
                        of result sets. If you want to limit the number of cached result sets, you
                        can configure a result set cache size.</dd>
                </dlentry>
                <dlentry>
                    <dt>Process All Available Rows from the Table</dt>
                    <dd>The origin creates multiple batches of data from one table, until all
                        available rows are read from that table. The origin runs one SQL query for
                        all batches created from the table. Then, the origin switches to the next
                        table, running another SQL query to read all available rows from that
                        table.</dd>
                    <dd>For example, let's say that the batch size for the origin is set to 100. The
                        origin is configured to read from two tables, each of which contains 1,000
                        rows. The origin runs one SQL query to create 10 batches of 100 rows each
                        from table1. Then, the origin switches to table2 and completes the same
                        process. When the origin finishes reading from table2, the origin switches
                        back to table1 to read all available data from the last saved offset.</dd>
                </dlentry>
            </dl>
        </p>
 </conbody>
</concept>
