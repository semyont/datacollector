<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_szj_slw_tr">
 <title>Type Handling</title>
 <conbody>
  <p><indexterm>JavaScript Evaluator processor<indexterm>type
    handling</indexterm></indexterm><indexterm>type handling<indexterm>JavaScript
     Evaluator</indexterm></indexterm>Though JavaScript does not use type information when
   processing data, passing data to the rest of the pipeline requires data types. Note the following
   type information before you configure the remainder of the pipeline: </p>
  <p>
   <dl>
    <dlentry>
     <dt>Data type of null values</dt>
     <dd>The processor can associate null values with a data type. For example, if the JavaScript
      Evaluator assigns a null value to an Integer field, the field is returned to the pipeline as
      an integer with a null value.</dd>
     <dd>Use constants in the JavaScript code to create a new field of a specific data type with a
            null value. For example, you can create a new String field with a null value by
            assigning the type constant NULL_STRING to the field as
            follows:<codeblock>records[i].value.new_field = NULL_STRING</codeblock></dd>
    </dlentry>
    <dlentry>
     <dt>Date fields</dt>
     <dd>Use the String data type to create a new field to store a date with a specific format. For
            example, the following sample code creates a new String field that stores the current
            date using the format
            YYYY-MM-dd:<codeblock> // Define a date object to record the current date
var date = new Date()

for(var i = 0; i &lt; records.length; i++) {
  try {
    // Create a string field to store the current date with the specified format
    records[i].value.date = date.getFullYear()+ "-" + date.getMonth() + "-" + date.getDate()
    
    // Write record to the processor output
    output.write(records[i]);
  } catch (e) {
    // Send record to error
    error.write(records[i], e);
  }
}</codeblock></dd>
    </dlentry>
   </dl>
   <dl>
    <dlentry>
     <dt>Values retain their original type</dt>
     <dd>Values retain their original type regardless of whether the processor modifies the
      value.</dd>
    </dlentry>
   </dl>
  </p>
 </conbody>
</concept>
