<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qbx_lcy_hw">
 <title>JDBC Tee</title>
 <conbody>
        <p><indexterm>JDBC Tee
                    processor<indexterm>overview</indexterm></indexterm><indexterm>processors<indexterm>JDBC
                    Tee</indexterm></indexterm>The JDBC Tee processor uses a JDBC connection to
            write data to a database table, and then pass generated database column values to
            fields. Use the JDBC Tee to write some or all record fields to a database table and then
            enrich records with additional data. </p>
        <p>To use JDBC Tee, the database table must be configured to generate column values as data
            is inserted.</p>
        <p>When you configure JDBC Tee, you specify connection information, table name, and
            optionally define field mappings. By default, JDBC Tee writes data to the table based on
            the matching field names. You can override the default field mappings by defining
            specific mappings.</p>
        <p>You define generated column mappings to specify the output fields to pass the generated
            database column values to.</p>
        <p>You can configure the stage to rollback an entire batch if an error occurs while writing
            part of the batch. You can also configure custom properties that your driver requires. </p>
        <p>The JDBC Tee processor <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/Dest-CRUDoverview"
            /></p>
        <p><ph conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/Dest-ChangeLog"
                /><ph conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/CDC-xref"
            /></p>
        <p>To use a JDBC version older than 4.0, you can specify the driver class name and define a
            health check query.</p>

        <section>
            <title>Example</title>        
            <p>Let's assume that you are processing customer orders. You have a customer database
                table with an ID column as the primary key. The customer table is configured to
                generate a sequential number for the ID column as each row is inserted into the
                table. For example, the first customer row is assigned an ID of 001, and the second
                is assigned an ID of 002. </p>
            <p>When you process a new customerâ€™s order, JDBC Tee inserts the customer data to the
                customer table and the database returns the generated ID for that customer. JDBC Tee
                passes the generated ID value to a new cust_ID field in the record. The processor
                passes all record fields to the next stage in the pipeline for additional
                processing.</p>
            <p>The following image displays a high-level overview of how JDBC Tee processes our
                customer order example: </p>
            <p><image href="../Graphics/JDBCTee.png" id="image_dc4_4rc_5w" scale="80"/></p>
        </section>
    </conbody>
</concept>
