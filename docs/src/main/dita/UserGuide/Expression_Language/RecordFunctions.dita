<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_p1z_ggv_1r">
 <title>Record Functions</title>
 <shortdesc>Use record functions to determine information about a record, such as the stage that
  created it or whether a field exists in the record. </shortdesc>
 <conbody>
  <p conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/FunctionArgument"/>
  <p><indexterm>functions<indexterm>record functions</indexterm></indexterm><indexterm>record
   functions<indexterm>description</indexterm></indexterm>The expression language provides the following general record functions: </p>
  <dl>
   <dlentry>
    <dt>record:attribute(&lt;attribute name>)</dt>
    <dd>Returns the value of the specified record attribute. Use to return data, for example, for
     the "tag" attribute that you set using the File Tail origin. </dd>
    <dd>Uses the following argument:<ul id="ul_sdn_vwv_1z">
      <li>attribute name - Name of the record header attribute.</li>
     </ul></dd>
    <dd>Return type: String.</dd>
    <dd>For example, the following expression returns the value of a tag attribute added by a File
     Tail origin:<codeblock>${record:attribute('tag')}</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:attributeOrDefault(&lt;attribute name> , &lt;default value>)</dt>
    <dd>Returns the value of the specified record header attribute. When the attribute does not
     exist or has no value, returns the specified default value.</dd>
    <dd>Uses the following arguments:<ul id="ul_nn4_kwv_1z">
      <li>attribute name - Name of the record header attribute.</li>
      <li>default value - Value to use when the record header attribute does not exist or has no
       value.</li>
     </ul></dd>
    <dd>Return type: Returns a string value when returning the field attribute value. Otherwise,
     returns the type of the specified default value.</dd>
    <dd>For example, the following expression returns the value of the tag attribute, and returns NA
     when no value exists:<codeblock>${record:attributeOrDefault('tag', 'NA')}</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:creator()</dt>
    <dd>Returns the instance name of the stage that created the record, typically an origin stage.
     Data is stored in the stageCreator field of a record. </dd>
    <dd>Return type: String.</dd>
    <dd>For example, the following expression returns the instance name of the stage that creates
     each record:<codeblock>${record:creator()}</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:eventCreation()</dt>
    <dd>Returns the epoch timestamp when an event occurred. Use to return the creation timestamp
     from an event record. Returns null values when applied to other records.</dd>
    <dd>Return type: String.</dd>
    <dd>For example, the following expression returns the time that the event-generating stage
     generated an event:<codeblock>${record:eventCreation()}</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:eventType()</dt>
    <dd>Returns the event type from an event record. Returns null values when applied to other
     records. </dd>
    <dd>Event generating stages create different event types. For information about the possible
     event types, see "Event Records" in the stage documentation. </dd>
    <dd>Return type: String.</dd>
    <dd>For example, the following expression returns the event type from an event
     record:<codeblock>${record:eventType()}</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:eventVersion()</dt>
    <dd>Returns the event version from an event record. Returns null values when applied to other
     records. </dd>
    <dd>Return type: String.</dd>
    <dd>For example, the following expression returns the event version from an event
     record:<codeblock>${record:eventVersion()}</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:exists(&lt;field path>)</dt>
    <dd>Determines if the specified field is in a record. When the field is not in the record,
     returns 0. When the field is in the record, returns 1. </dd>
    <dd>Return type: Boolean.</dd>
    <dd>For example, the following expression returns 1 when the Name field exists in a
     record:<codeblock>${record:exists('/Name')}</codeblock></dd>
    <dd>It returns 0 when the Name field is not part of the record.</dd>
   </dlentry>
   <dlentry>
    <dt>record:fieldAttribute(&lt;field path>, &lt;field attribute name>)</dt>
    <dd>Returns the value for the specified field attribute.</dd>
    <dd>Uses the following arguments:<ul id="ul_plr_kxv_1z">
      <li>field path - Path to the field with the attribute.</li>
      <li>field attribute name - Name of the field attribute.</li>
     </ul></dd>
    <dd>Return type: String</dd>
    <dd>For example, the following expression returns the value for the pk attribute on the ID
     field:<codeblock>record:fieldAttribute('/ID', 'pk')</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:fieldAttributeOrDefault(&lt;field path>, &lt;field attribute name>, &lt;default
     value>)</dt>
    <dd>Returns the value for the field attribute when it exists. If the attribute does not exist,
     returns the specified default value. </dd>
    <dd>Uses the following arguments:<ul id="ul_wmk_sxv_1z">
      <li>field path - Path to the field with the attribute.</li>
      <li>field attribute name - Name of the field attribute.</li>
      <li>default value - Value to use when the field attribute does not exist or has no value.</li>
     </ul></dd>
    <dd>Return type: Returns a string value when returning the field attribute value. Otherwise,
     returns the type of the specified default value.</dd>
    <dd>For example, the following expression returns the value for the pk attribute on the ID field
     when available, otherwise, it returns
     "n".<codeblock>record:fieldAttributeOrDefault('/ID', 'pk', 'n')</codeblock></dd>
   </dlentry>
   <dlentry>
    <dt>record:id()</dt>
    <dd>Returns the ID of the stage that created the record, typically an origin stage. Data is
     stored in the sourceId field of a record. </dd>
    <dd>Return type: String.</dd>
   </dlentry>
   <dlentry>
    <dt>record:path()</dt>
    <dd>Returns the stages in the pipeline that processed a record. Data is stored in the stagesPath
     field of a record. The field path uses the following
     format:<codeblock>&lt;origin instance name>:&lt;next stage instance name>:&lt;next stage instance name>:... </codeblock></dd>
    <dd>Return type: String.</dd>
   </dlentry>
   <dlentry>
    <dt>record:type(&lt;field path>)</dt>
    <dd>Checks the data type of a field. Possible return values are: <ul id="ul_lmr_2hv_1r">
      <li>Boolean</li>
      <li>Char</li>
      <li>Byte</li>
      <li>Short</li>
      <li>Integer</li>
      <li>Long</li>
      <li>Float</li>
      <li>Double</li>
      <li>Date</li>
      <li>Datetime</li>
      <li>Decimal</li>
      <li>String</li>
      <li>Time</li>
      <li>Byte-Array</li>
      <li>Map</li>
      <li>List</li>
     </ul></dd>
    <dd>Return type: String. </dd>
   </dlentry>
   <dlentry>
    <dt>record:value(&lt;field path>)</dt>
    <dd>Returns the value of the field in the appropriate data type.</dd>
    <dd>Return type: When the field includes a value, returns the type based on the field value.
     When the field is null, the function returns no value. </dd>
    <dd>
     <p>Nulls are coerced based on the expected return type of the function. For example, if an EL
      is expected to return a string, null is coerced to an empty string. However, a null integer is
      coerced to 0.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>record:valueOrDefault(&lt;field path> , &lt;default value>)</dt>
    <dd>Returns the value of the field in the appropriate data type. If the field does not exist or
     if the field is null, returns the default value.</dd>
    <dd>Use to provide a default value when a field does not exist or when a field is null. </dd>
    <dd>Return type: Variable, based on whether the function returns the field value or default
     value.</dd>
   </dlentry>
  </dl>
 </conbody>
</concept>
