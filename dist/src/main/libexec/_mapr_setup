#!/bin/bash
# Copyright 2016 StreamSets Inc.
#
# Licensed under the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Prerequisites:
# - The MapR client package must be installed and configured
#   on the machine where StreamSets is being installed.
#
# This script does following:
# - Obtain MapR version and MapR Home directory
# - Remove the MapR version from blacklist in etc/sdc.properties
# - Create soft links to MapR client libraries so that StreamSets data collector can load these at runtime.
# - Add permissions to MapR libraries in sdc-security.policy

BLACKLIST_PROP="system.stagelibs.blacklist"
PROP_FILENAME="sdc.properties"
POLICY_FILENAME="sdc-security.policy"
MAPR_VERSION=5.2.0
MAPR_HOME=""
MAPR_LIB="streamsets-datacollector-mapr"

if [ -z ${SDC_HOME} ];then
  echo "Set the SDC_HOME environment variable to the Data Collector installation directory."
  exit 0
fi

# Check if SDC_HOME really points to the StreamSets Data Collector
if [ ! -f "${SDC_HOME}/bin/streamsets" ];then
   echo "SDC_HOME is not pointing to StreamSets Data Collector. Please check the directory path"
   exit 0
fi

if [ -z ${SDC_CONF} ];then
  echo "Set the SDC_CONF environment variable to the Data Collector configuration directory."
  exit 0
fi

# Check if SDC_CONF really points to the directory where config files are stored
if [ ! -f "${SDC_CONF}/${PROP_FILENAME}" ];then
  echo "SDC_CONF is not pointing to the directory where config files are stored. Please check the directory path."
  exit 0
fi

SDC_PROP_FILE="${SDC_CONF}/${PROP_FILENAME}"
SDC_POLICY_FILE="${SDC_CONF}/${POLICY_FILENAME}"

# Confirm sdc.properties exists in the expected directory and has a permission to write
if [ ! -w "${SDC_PROP_FILE}" ]; then
  echo "Error: Check ${SDC_PROP_FILE} exists and current user has a write permission"
  echo "Exit."
  exit 0
fi

# Check if this is running on supported OS
if [[ $OSTYPE == "darwin"* ]]; then
  # OS X requires specifying backup file extension in sed command
  BACKUP_EXT="''"
elif [[ $OSTYPE == "cygwin" ]];then
  echo "Error: Cannot used on Windows OS"
  exit 0
fi

# Input from user
read -p "Please enter the MapR version (default 5.2.0): " MAPR_VERSION
MAPR_VERSION=${MAPR_VERSION:=5.2.0}
# Check if input version is valid
if ! [[ ${MAPR_VERSION} =~ ^[1-9][0-9]*\.[0-9]*(\.[0-9]*)*$ ]];
then
  echo "Error: Invalid MapR version number"
  exit 0
fi
MAPR_VERSION=`expr "$MAPR_VERSION" : '\([1-9][0-9]*\.[0-9]*\)'`
_MAPR_VERSION=${MAPR_VERSION/./_}
MAPR_LIB=${MAPR_LIB}_${_MAPR_VERSION}-lib
# Check if this Data Collector support the MapR version
if [ ! -d "$SDC_HOME/streamsets-libs/$MAPR_LIB" ]; then
   echo "Error: StreamSets Data Collector does not support MapR version $MAPR_VERSION"
  exit 0
fi

# Obtain MapR home
read -p "Please enter the absolute path of MapR Home (default /opt/mapr): " MAPR_HOME
MAPR_HOME=${MAPR_HOME:="/opt/mapr"}

# Check if MAPR_HOME is indeed MapR home directory
if [ ! -e "${MAPR_HOME}/MapRBuildVersion" ]; then
  echo "Error: ${MAPR_HOME} is not the correct path to MapR Home"
  exit 0
fi

# Remove MapR Version from sdc.properies file
printf "Updating sdc.properties file ...."
original_property=$(grep -i "$BLACKLIST_PROP" "${SDC_PROP_FILE}")
blacklist_property=${original_property/${MAPR_LIB}/}
sed -i ${BACKUP_EXT} "s/${original_property}/${blacklist_property}/" "${SDC_PROP_FILE}"
printf "Done.\n"

# Create symbolic links. Ignore the stderr (there will be a lot of symlinks already exist errors)
printf "Creating symbolic links ...."
ln -s ${MAPR_HOME}/lib/*.jar ${SDC_HOME}/streamsets-libs/${MAPR_LIB}/lib/ 2>/dev/null
ln -s ${MAPR_HOME}/hadoop/hadoop-*/share/hadoop/common/lib/*.jar ${SDC_HOME}/streamsets-libs/${MAPR_LIB}/lib/ 2>/dev/null
ln -s ${MAPR_HOME}/hbase/hbase-*/lib/*.jar  ${SDC_HOME}/streamsets-libs/${MAPR_LIB}/lib/ 2>/dev/null
ln -s ${MAPR_HOME}/hive/hive-*/lib/*.jar ${SDC_HOME}/streamsets-libs/${MAPR_LIB}/lib/ 2>/dev/null
ln -s ${MAPR_HOME}/hive/hive-*/hcatalog/share/hcatalog/*.jar ${SDC_HOME}/streamsets-libs/${MAPR_LIB}/lib/ 2>/dev/null
ln -s ${MAPR_HOME}/lib/maprfs-${MAPR_VERSION}*.jar  ${SDC_HOME}/root-lib/ 2>/dev/null
printf "Done.\n"

# Add permission to sdc-security.policy file
printf "Updating sdc-security.policy file ..."
if grep -q "file://${MAPR_HOME}" "${SDC_POLICY_FILE}"; then
  printf "permission already added.\n"
else
  printf "\ngrant codebase \"file://%s/-\" {\n  permission java.security.AllPermission;\n};\n" "${MAPR_HOME}" >> ${SDC_POLICY_FILE}
  printf "Done\n"
fi

echo "Succeeded"
